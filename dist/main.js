// es6 module syntax
'use strict';

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _prismjs = require('prismjs');

var Prism = _interopRequireWildcard(_prismjs);

var _wavesBasicControllers = require('waves-basic-controllers');

var WC = _interopRequireWildcard(_wavesBasicControllers);

// shared context
var ctx = new AudioContext();

// --------------------------------------------
// tremolo example
// --------------------------------------------
(function () {

  var defaultFrequency = 300;
  var defaultLfoFrequency = 4;
  var defaultDepth = 0.2;

  // 2. create source
  var sine = ctx.createOscillator();
  sine.type = 'sine';
  sine.frequency.value = defaultFrequency;

  // 3. frequency modulation
  var lfo = ctx.createOscillator();
  lfo.frequency.value = defaultLfoFrequency;
  lfo.type = 'sine';
  // frequency modulation amplitude
  var depth = ctx.createGain();
  depth.gain.value = defaultDepth;

  //
  var amplitude = ctx.createGain();
  amplitude.gain.value = 0.8;

  var master = ctx.createGain();
  master.gain.value = 0;

  // create graph
  lfo.connect(depth);
  depth.connect(amplitude.gain);

  sine.connect(amplitude);
  amplitude.connect(master);
  master.connect(ctx.destination);

  // start
  var now = ctx.currentTime;
  sine.start(now);
  lfo.start(now);

  new WC.Toggle('start / stop', false, '#tremolo-controllers', function (flag) {
    var now = ctx.currentTime;
    master.gain.value = flag ? 1 : 0;
  });

  new WC.Slider('sine frequency', 20, 1000, 1, defaultFrequency, 'Hz', 'large', '#tremolo-controllers', function (value) {
    sine.frequency.setValueAtTime(value, ctx.currentTime);
  });

  new WC.Slider('mod frequency', 0, 100, 0.1, defaultLfoFrequency, 'Hz', 'large', '#tremolo-controllers', function (value) {
    lfo.frequency.setValueAtTime(value, ctx.currentTime);
  });

  new WC.Slider('mod depth', 0, 1, 0.01, defaultDepth, '.', 'large', '#tremolo-controllers', function (value) {
    depth.gain.setValueAtTime(value, ctx.currentTime);
  });
})();
//# sourceMappingURL=data:application/json;base64,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QUM7R0FDdEQsQ0FBQyxDQUFDOztBQUVILE1BQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsVUFBUyxLQUFLLEVBQUU7QUFDekcsU0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztHQUNuRCxDQUFDLENBQUM7Q0FFSixDQUFBLEVBQUUsQ0FBRSIsImZpbGUiOiJlczYvbWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGVzNiBtb2R1bGUgc3ludGF4XG5pbXBvcnQgKiBhcyBQcmlzbSBmcm9tICdwcmlzbWpzJztcbmltcG9ydCAqIGFzIFdDIGZyb20gJ3dhdmVzLWJhc2ljLWNvbnRyb2xsZXJzJztcblxuLy8gc2hhcmVkIGNvbnRleHRcbnZhciBjdHggPSBuZXcgQXVkaW9Db250ZXh0KCk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyB0cmVtb2xvIGV4YW1wbGVcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4oZnVuY3Rpb24oKSB7XG5cbiAgY29uc3QgZGVmYXVsdEZyZXF1ZW5jeSA9IDMwMDtcbiAgY29uc3QgZGVmYXVsdExmb0ZyZXF1ZW5jeSA9IDQ7XG4gIGNvbnN0IGRlZmF1bHREZXB0aCA9IDAuMjtcblxuICAvLyAyLiBjcmVhdGUgc291cmNlXG4gIGNvbnN0IHNpbmUgPSBjdHguY3JlYXRlT3NjaWxsYXRvcigpO1xuICBzaW5lLnR5cGUgPSAnc2luZSc7XG4gIHNpbmUuZnJlcXVlbmN5LnZhbHVlID0gZGVmYXVsdEZyZXF1ZW5jeTtcblxuICAvLyAzLiBmcmVxdWVuY3kgbW9kdWxhdGlvblxuICBjb25zdCBsZm8gPSBjdHguY3JlYXRlT3NjaWxsYXRvcigpO1xuICBsZm8uZnJlcXVlbmN5LnZhbHVlID0gZGVmYXVsdExmb0ZyZXF1ZW5jeTtcbiAgbGZvLnR5cGUgPSAnc2luZSc7XG4gIC8vIGZyZXF1ZW5jeSBtb2R1bGF0aW9uIGFtcGxpdHVkZVxuICBjb25zdCBkZXB0aCA9IGN0eC5jcmVhdGVHYWluKCk7XG4gIGRlcHRoLmdhaW4udmFsdWUgPSBkZWZhdWx0RGVwdGg7XG5cbiAgLy9cbiAgY29uc3QgYW1wbGl0dWRlID0gY3R4LmNyZWF0ZUdhaW4oKTtcbiAgYW1wbGl0dWRlLmdhaW4udmFsdWUgPSAwLjg7XG5cbiAgY29uc3QgbWFzdGVyID0gY3R4LmNyZWF0ZUdhaW4oKTtcbiAgbWFzdGVyLmdhaW4udmFsdWUgPSAwO1xuXG4gIC8vIGNyZWF0ZSBncmFwaFxuICBsZm8uY29ubmVjdChkZXB0aCk7XG4gIGRlcHRoLmNvbm5lY3QoYW1wbGl0dWRlLmdhaW4pO1xuXG4gIHNpbmUuY29ubmVjdChhbXBsaXR1ZGUpO1xuICBhbXBsaXR1ZGUuY29ubmVjdChtYXN0ZXIpO1xuICBtYXN0ZXIuY29ubmVjdChjdHguZGVzdGluYXRpb24pO1xuXG4gIC8vIHN0YXJ0XG4gIGNvbnN0IG5vdyA9IGN0eC5jdXJyZW50VGltZTtcbiAgc2luZS5zdGFydChub3cpO1xuICBsZm8uc3RhcnQobm93KTtcblxuICBuZXcgV0MuVG9nZ2xlKCdzdGFydCAvIHN0b3AnLCBmYWxzZSwgJyN0cmVtb2xvLWNvbnRyb2xsZXJzJywgZnVuY3Rpb24oZmxhZykge1xuICAgIGNvbnN0IG5vdyA9IGN0eC5jdXJyZW50VGltZTtcbiAgICBtYXN0ZXIuZ2Fpbi52YWx1ZSA9IGZsYWcgPyAxIDogMDtcbiAgfSk7XG5cbiAgbmV3IFdDLlNsaWRlcignc2luZSBmcmVxdWVuY3knLCAyMCwgMTAwMCwgMSwgZGVmYXVsdEZyZXF1ZW5jeSwgJ0h6JywgJ2xhcmdlJywgJyN0cmVtb2xvLWNvbnRyb2xsZXJzJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICBzaW5lLmZyZXF1ZW5jeS5zZXRWYWx1ZUF0VGltZSh2YWx1ZSwgY3R4LmN1cnJlbnRUaW1lKTtcbiAgfSk7XG5cbiAgbmV3IFdDLlNsaWRlcignbW9kIGZyZXF1ZW5jeScsIDAsIDEwMCwgMC4xLCBkZWZhdWx0TGZvRnJlcXVlbmN5LCAnSHonLCAnbGFyZ2UnLCAnI3RyZW1vbG8tY29udHJvbGxlcnMnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGxmby5mcmVxdWVuY3kuc2V0VmFsdWVBdFRpbWUodmFsdWUsIGN0eC5jdXJyZW50VGltZSk7XG4gIH0pO1xuXG4gIG5ldyBXQy5TbGlkZXIoJ21vZCBkZXB0aCcsIDAsIDEsIDAuMDEsIGRlZmF1bHREZXB0aCwgJy4nLCAnbGFyZ2UnLCAnI3RyZW1vbG8tY29udHJvbGxlcnMnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGRlcHRoLmdhaW4uc2V0VmFsdWVBdFRpbWUodmFsdWUsIGN0eC5jdXJyZW50VGltZSk7XG4gIH0pO1xuXG59KCkpO1xuXG5cbiJdfQ==